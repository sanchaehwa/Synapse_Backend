plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.synapse'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	//springboot
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	annotationProcessor 'org.projectlombok:lombok'
	//security
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'
	//redis
	implementation 'org.springframework.session:spring-session-data-redis'
	compileOnly 'org.projectlombok:lombok'
	//mysql
	runtimeOnly 'com.mysql:mysql-connector-j'
	//test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.rest-assured:spring-mock-mvc'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	//swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.8'
	//query-dsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	//jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
	//mail
	implementation 'org.springframework.boot:spring-boot-starter-mail'

}
// QClass 패턴을 찾는 메서드
def findQClassPatterns() {
	def excludedPatterns = []
	def generatedDir = layout.buildDirectory.dir("generated").get().asFile

	fileTree(generatedDir).include("**/Q*.java")
			.each { File file ->
				def className = file.name.replace('.java', '')
				excludedPatterns.add("**/${className}.class")
			}

	return excludedPatterns
}

tasks.named('test') {
	useJUnitPlatform()
}
